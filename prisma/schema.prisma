// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // uses connection pooling
  // url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id                  Int                     @id @default(autoincrement())
  email               String                  @unique
  password            String?
  nick                String?
  name                String?
  cpf                 String?
  birday              DateTime?               @db.Date
  gender              UserGender?             @default(M)
  phone               String?
  image               String?
  cityId              Int?
  emailVerified       DateTime?
  shirtSize           ShirtSize?              @default(M)
  createdAt           DateTime                @default(now())
  updatedAt           DateTime?               @updatedAt
  lastAccess          DateTime?
  beachTennisProfile  UserBeachTennisProfile?
  accessGroups        UserAccessGroup[]
  createdAccessGroups UserAccessGroup[]       @relation("Created_UserAccessGroup")
  accounts            Account[]
  sessions            Session[]

  arenas        Arena[] @relation("User_Arena")
  createdArenas Arena[] @relation("Created_Arena")
  updatedArenas Arena[] @relation("Updated_Arena")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verificationtokens")
}

model UserBeachTennisProfile {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique // relation scalar field (used in the `@relation` attribute above)
  bio       String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  public    Boolean? @default(true)

  user     User                @relation(fields: [userId], references: [id])
  category BeachTennisCategory

  @@map("users_bt_profiles")
}

model UserAccessGroup {
  userId    Int
  groupId   Int
  createdBy Int
  createdAt DateTime @default(now())

  accessGroup AccessGroup @relation(fields: [groupId], references: [id])
  createdUser User        @relation(fields: [createdBy], references: [id], name: "Created_UserAccessGroup")
  user        User        @relation(fields: [userId], references: [id])

  @@id([userId, groupId])
  @@map("users_access_groups")
}

model AccessGroup {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())

  userAccessGroups UserAccessGroup[]

  @@map("access_groups")
}

model Account {
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

// @see https://www.ibge.gov.br/explica/codigos-dos-municipios.php
model City {
  id    Int     @id // utilizar códigos do IGBE
  name  String
  ufId  Int
  uf    Uf      @relation(fields: [ufId], references: [id])
  Arena Arena[]

  @@map("cities")
}

model Uf {
  id     Int    @id // utilizar códigos do IGBE
  name   String
  cities City[]

  @@map("uf")
}

model Arena {
  id          Int       @id @default(autoincrement())
  name        String
  description String?   @db.Text()
  userId      Int
  cityId      Int
  address     String?
  phone       String?
  rating      Float?    @default(0)
  reviews     Int?      @default(0)
  createdBy   Int
  createdAt   DateTime  @default(now())
  updatedBy   Int?
  updatedAt   DateTime? @updatedAt

  city        City  @relation(fields: [cityId], references: [id])
  user        User  @relation(fields: [userId], references: [id], name: "User_Arena")
  createdUser User  @relation(fields: [createdBy], references: [id], name: "Created_Arena")
  updatedUser User? @relation(fields: [updatedBy], references: [id], name: "Updated_Arena")

  // @@fulltext([name, description])
  @@map("arenas")
}

enum BeachTennisCategory {
  PRO
  A
  B
  C
  D
}

enum UserGender {
  M
  F
  X
}

enum ShirtSize {
  PP
  P
  M
  G
  GG
  EG
  EGG
}
